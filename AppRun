#!/usr/bin/env python
import findrox; findrox.version(1, 9, 13)

import os
import rox
from rox.settings import Setting, Settings
g = rox.g

__builtins__._ = rox.i18n.translation(os.path.join(rox.app_dir, 'Messages'))

settings = Settings()
xrandr_setting = Setting('ROX/XRandRArgs', '', settings)

class Field(g.HBox):
	def __init__(self, name, sg):
		g.HBox.__init__(self, False, 4)
		label = g.Label(name)
		label.set_alignment(1, 0.5)
		sg.add_widget(label)
		self.pack_start(label, False, True, 0)
		frame = g.Frame()
		frame.set_shadow_type(g.SHADOW_IN)
		self.pack_start(frame, True, True, 0)
		self.value = g.Label('')
		frame.add(self.value)
		self.value.set_padding(2, 2)

class ResBox(rox.Dialog):
	def __init__(self):
		rox.Dialog.__init__(self, _("Screen Resolution"))
		self.add_button(g.STOCK_HELP, g.RESPONSE_HELP)
		self.add_button(g.STOCK_CLOSE, g.RESPONSE_CANCEL)
		self.add_button(g.STOCK_APPLY, g.RESPONSE_OK)
		self.set_default_response(g.RESPONSE_OK)
		self.set_has_separator(False)
		def resp(d, r):
			if r == int(g.RESPONSE_HELP):
				from rox import filer
				filer.open_dir(os.path.join(rox.app_dir, 'Help'))
			elif r == int(g.RESPONSE_OK):
				current_settings = [
					settings[self.resolutions[output].get_history()]
					for (i, output), settings in self.settings.iteritems()
				]
				xrandr.set_modes(current_settings)
				xrandr_setting._set(' '.join(
					xrandr.settings_to_args(current_settings)))
				current, self.settings = xrandr.get_settings()
				for output, setting in current.iteritems():
					phy_size = '%s x %s' % (setting.phy_width, setting.phy_height)
					self.physical_size[output].value.set_text(phy_size)
				self.hide()
				self.present()
			else:
				d.destroy()
		self.connect('response', resp)

		sg = g.SizeGroup(g.SIZE_GROUP_BOTH)

		outputs_hbox = g.HBox(False, 4)
		self.vbox.pack_start(outputs_hbox, True, True, 0)

		current, self.settings = xrandr.get_settings()

		self.resolutions = {}
		self.refresh_rates = {}
		self.physical_size = {}
		self.enabled = {}

		for (i, output), settings in sorted(self.settings.iteritems(),
									key=lambda x: x[0][0]):
			frame = g.Frame(output)
			vbox = g.VBox(False, 4)
			vbox.set_border_width(5)
			frame.add(vbox)

			outputs_hbox.pack_start(frame, False, True, 0)
			hbox = g.HBox(False, 4)
			vbox.pack_start(hbox, False, True, 0)
			label = g.Label(_('Resolution: '))
			sg.add_widget(label)
			label.set_alignment(1, 0.5)
			hbox.pack_start(label, False, True, 0)
			self.resolutions[output] = g.OptionMenu()
			hbox.pack_start(self.resolutions[output], True, True, 0)

			menu = g.Menu()
			self.resolutions[output].set_menu(menu)
			for s in settings:
				item = g.MenuItem(str(s))
				menu.append(item)
				item.show()
			self.resolutions[output].connect('changed', self.show_details, i, output)

			self.enabled[output] = g.CheckButton(_('Enabled'))
			self.enabled[output].set_active(
				output in current and current[output].enabled)
			self.enabled[output].connect('toggled', self.enabled_toggled, i, output)
			vbox.pack_start(self.enabled[output])

			self.refresh_rates[output] = g.OptionMenu()
			vbox.pack_start(self.refresh_rates[output])
			self.refresh_rates[output].connect('changed',
									  self.refresh_rate_changed, i, output)

			menu = g.Menu()
			self.refresh_rates[output].set_menu(menu)

			self.physical_size[output] = Field(_('Physical size: '), sg)
			vbox.pack_start(self.physical_size[output], False, True, 0)

			try:
				i = settings.index(current[output])
			except KeyError:
				i = 0
			self.resolutions[output].set_history(i)

		self.vbox.show_all()

	def refresh_rate_changed(self, refresh_rates, i, output):
		current = self.settings[i, output][self.resolutions[output].get_history()]
		current.current_r = current.res[refresh_rates.get_history()]

	def enabled_toggled(self, checkbutton, i, output):
		for setting in self.settings[i, output]:
			setting.enabled = checkbutton.get_active()
		enabled_checkbuttons = [
			button for button in self.enabled.itervalues()
			if button.get_active()
		]
		if len(enabled_checkbuttons) == 1:
			enabled_checkbuttons[0].set_sensitive(False)
		else:
			for checkbutton in self.enabled.itervalues():
				checkbutton.set_sensitive(True)

	def show_details(self, resolutions, i, output):
		current = self.settings[i, output][resolutions.get_history()]
		phy_size = '%s x %s' % (current.phy_width, current.phy_height)
		self.physical_size[output].value.set_text(phy_size)
		menu = g.Menu()
		self.refresh_rates[output].set_menu(menu)
		for refresh_rate in current.res:
			item = g.MenuItem('%s Hz' % refresh_rate)
			menu.append(item)
			item.show()
		self.refresh_rates[output].set_history(
			current.res.index(current.current_r)
			if current.current_r is not None else 0
		)
	

try:
	import xrandr
	ResBox().show()
except:
	rox.report_exception()

rox.mainloop()
